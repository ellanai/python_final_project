---
title: "3058 Final Project: How Teacher Characteristics Correlate with Student Test Scores. Evidence from Texas ESC Region 20"
author: "Evy Lanai & Alberto Saldarriaga"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
output:
  echo: false
  eval: false
---

## Packages

```{bash}
pip install -r requirements.txt
```

## Loading packages

```{python}
import pandas as pd
import altair as alt
import geopandas as gpd
import matplotlib.pyplot as plt
from shiny import App, render, ui
from shinywidgets import render_altair, output_widget
import numpy as np

import warnings
# Suppress specific FutureWarnings
warnings.filterwarnings("ignore", category=FutureWarning)
```

```{python loading the dfs, echo=FALSE}
## 1. Data Wrangling

## 1.1 Data Wrangling
#Institutional outcomes (class size/absenteesm)
path = r"Data\Raw\student\DSTUD.xlsx"
df_students = pd.read_excel(path)
print(df_students.columns) #To confirm variables names

#Staff outcomes (teacher characteristics)
path = r"Data\Raw\staff\DSTAF.xlsx"
df_staff = pd.read_excel(path) 
print(df_staff.columns) #To confirm variables names

#Student outcomes (test scores)
path = r"Data\Raw\staar\DSTAAR_ALL.xlsx"
df_staar = pd.read_excel(path)
print(df_staar.columns) #To confirm variables names
```

```{python merging, echo=FALSE}
## 1.2 Merging
df = pd.merge(df_students, df_staff, on="DISTRICT", how="left", suffixes=('', '_drop'))
df = df.drop(columns=['DISTNAME_drop']) #Drop the duplicate variable

df = pd.merge(df, df_staar, on="DISTRICT", how="left", suffixes=('', '_drop'))
df = df.drop(columns=['DISTNAME_drop']) #Drop the duplicate variable
```

```{python renaming, echo=FALSE}
## 1.3 Renaming and keeping variables of interest
# Variables of interest
rename_dict = {
    #Levels
    'DDA00AR01S23R': 'All_ELA_District_Approaches',
    'DDA00AR01223R': 'All_ELA_District_Meets',
    'DDA00AR01323R': 'All_ELA_District_Masters',
    'DDA00AM01S23R': 'All_Math_District_Approaches',
    'DDA00AM01223R': 'All_Math_District_Meets',
    'DDA00AM01323R': 'All_Math_District_Masters',

    #Race/Ethnicity    
    'DDB00AR01S23R': 'All_ELA_AfricanAmerican_Approaches',
    'DDB00AR01223R': 'All_ELA_AfricanAmerican_Meets',
    'DDB00AR01323R': 'All_ELA_AfricanAmerican_Masters',
    'DDB00AM01S23R': 'All_Math_AfricanAmerican_Approaches',
    'DDB00AM01223R': 'All_Math_AfricanAmerican_Meets',
    'DDB00AM01323R': 'All_Math_AfricanAmerican_Masters',
    'DDH00AR01S23R': 'All_ELA_Hispanic_Approaches',
    'DDH00AR01223R': 'All_ELA_Hispanic_Meets',
    'DDH00AR01323R': 'All_ELA_Hispanic_Masters',
    'DDH00AM01S23R': 'All_Math_Hispanic_Approaches',
    'DDH00AM01223R': 'All_Math_Hispanic_Meets',
    'DDH00AM01323R': 'All_Math_Hispanic_Masters',
    'DDW00AR01S23R': 'All_ELA_White_Approaches',
    'DDW00AR01223R': 'All_ELA_White_Meets',
    'DDW00AR01323R': 'All_ELA_White_Masters',
    'DDW00AM01S23R': 'All_Math_White_Approaches',
    'DDW00AM01223R': 'All_Math_White_Meets',
    'DDW00AM01323R': 'All_Math_White_Masters',

    #Type-specific Ed
    'DDS00AR01S23R': 'All_ELA_SpecialEd_Approaches',
    'DDS00AR01223R': 'All_ELA_SpecialEd_Meets',
    'DDS00AR01323R': 'All_ELA_SpecialEd_Masters',
    'DDS00AM01S23R': 'All_Math_SpecialEd_Approaches',
    'DDS00AM01223R': 'All_Math_SpecialEd_Meets',
    'DDS00AM01323R': 'All_Math_SpecialEd_Masters',
    'DDE00AR01S23R': 'All_ELA_EcoDis_Approaches',
    'DDE00AR01223R': 'All_ELA_EcoDis_Meets',
    'DDE00AR01323R': 'All_ELA_EcoDis_Masters',
    'DDE00AM01S23R': 'All_Math_EcoDis_Approaches',
    'DDE00AM01223R': 'All_Math_EcoDis_Meets',
    'DDE00AM01323R': 'All_Math_EcoDis_Masters',
    'DD000AR01S23R': 'All_ELA_EBEL_Approaches',
    'DD000AR01223R': 'All_ELA_EBEL_Meets',
    'DD000AR01323R': 'All_ELA_EBEL_Masters',
    'DD000AM01S23R': 'All_Math_EBEL_Approaches',
    'DD000AM01223R': 'All_Math_EBEL_Meets',
    'DD000AM01323R': 'All_Math_EBEL_Masters',

    # Enrollment variables
    'DPNTALLC': 'Enrollment_Total',
    'DPNTBLAP': 'Enrollment_AfricanAmerican',
    'DPNTHISP': 'Enrollment_Hispanic',
    'DPNTWHIP': 'Enrollment_White',
    'DPNTFEMP': 'Enrollment_Female',
    'DPNTMALP': 'Enrollment_Male',
    'DPNTECOP': 'Enrollment_EcoDis',
    'DPNTNEDP': 'Enrollment_NonEcoDis',
    'DPNT504P': 'Enrollment_Sect504',
    'DPNTBILP': 'Enrollment_EBEL',
    
    # Class size variables
    'DPCTGKGA': 'ClassSize_Kindergarten',
    'DPCTG01A': 'ClassSize_Grade1',
    'DPCTG02A': 'ClassSize_Grade2',
    'DPCTG03A': 'ClassSize_Grade3',
    'DPCTG04A': 'ClassSize_Grade4',
    'DPCTG05A': 'ClassSize_Grade5',
    'DPCTG06A': 'ClassSize_Grade6',
    
    # Teacher and staff counts
    'DPSTTOFC': 'Teacher_Count',
    'DPSPTOFC': 'ProfessionalSupport_Count',
    'DPSSTOFC': 'CampusAdmin_Count',
    'DPSCTOFC': 'CentralAdmin_Count',
    'DPSECOFC': 'EducationalAides_Count',
    'DPSRTOFC': 'FullTime_Counselors_Count',
    'DPSRTOPC': 'PartTime_Counselors_Count',
    
    # Teacher demographics
    'DPSTBLFP': 'Teachers_AfricanAmerican',
    'DPSTHIFP': 'Teachers_Hispanic',
    'DPSTWHFP': 'Teachers_White',
    'DPSTMAFP': 'Teachers_Male',
    'DPSTFEFP': 'Teachers_Female',
    
    # Teacher education
    'DPSTNOFP': 'Teachers_NoDegree',
    'DPSTBAFP': 'Teachers_Bachelors',
    'DPSTMSFP': 'Teachers_Masters',
    'DPSTPHFP': 'Teachers_Doctorate',
    
    # Teacher experience
    'DPST00FP': 'Experience_None',
    'DPST01FP': 'Experience_1to5',
    'DPST06FP': 'Experience_6to10',
    'DPST11FP': 'Experience_11to20',
    
    # Principal and teacher experience (years)
    'DPSHEXPA': 'Years_Experience_Principals',
    'DPSTEXPA': 'Years_Experience_Teachers',
    
    # Teacher salaries by experience
    'DPST00SA': 'Salary_Experience_None',
    'DPST01SA': 'Salary_Experience_1to5',
    'DPST06SA': 'Salary_Experience_6to10',
    'DPST11SA': 'Salary_Experience_11to20',
    'DPST21SA': 'Salary_Experience_21to30',
    'DPST30SA': 'Salary_Experience_Over30',
    
    # Salaries by role
    'DPSTTOSA': 'Salary_Teachers',
    'DPSUTOSA': 'Salary_ProfessionalSupport',
    'DPSSTOSA': 'Salary_CampusAdmin',
    'DPSCTOSA': 'Salary_CentralAdmin',
    
    # Turnover
    'DPSTURNR': 'Turnover_Teachers'
}

df.rename(columns=rename_dict, inplace=True)

# Keeping our variables
variables_to_keep = [
    'DISTRICT', 'DISTNAME',
    'All_ELA_District_Approaches', 'All_ELA_District_Meets', 'All_ELA_District_Masters',
    'All_Math_District_Approaches', 'All_Math_District_Meets', 'All_Math_District_Masters',
    'All_ELA_AfricanAmerican_Approaches', 'All_ELA_AfricanAmerican_Meets', 'All_ELA_AfricanAmerican_Masters',
    'All_Math_AfricanAmerican_Approaches', 'All_Math_AfricanAmerican_Meets', 'All_Math_AfricanAmerican_Masters',
    'All_ELA_Hispanic_Approaches', 'All_ELA_Hispanic_Meets', 'All_ELA_Hispanic_Masters',
    'All_Math_Hispanic_Approaches', 'All_Math_Hispanic_Meets', 'All_Math_Hispanic_Masters',
    'All_ELA_White_Approaches', 'All_ELA_White_Meets', 'All_ELA_White_Masters',
    'All_Math_White_Approaches', 'All_Math_White_Meets', 'All_Math_White_Masters',
    'All_ELA_SpecialEd_Approaches', 'All_ELA_SpecialEd_Meets', 'All_ELA_SpecialEd_Masters',
    'All_Math_SpecialEd_Approaches', 'All_Math_SpecialEd_Meets', 'All_Math_SpecialEd_Masters',
    'All_ELA_EcoDis_Approaches', 'All_ELA_EcoDis_Meets', 'All_ELA_EcoDis_Masters',
    'All_Math_EcoDis_Approaches', 'All_Math_EcoDis_Meets', 'All_Math_EcoDis_Masters',
    'All_ELA_EBEL_Approaches', 'All_ELA_EBEL_Meets', 'All_ELA_EBEL_Masters',
    'All_Math_EBEL_Approaches', 'All_Math_EBEL_Meets', 'All_Math_EBEL_Masters',
    'Enrollment_Total', 'Enrollment_AfricanAmerican', 'Enrollment_Hispanic', 'Enrollment_White',
    'Enrollment_Female', 'Enrollment_Male', 'Enrollment_EcoDis', 'Enrollment_NonEcoDis',
    'Enrollment_Sect504', 'Enrollment_EBEL',
    'ClassSize_Kindergarten', 'ClassSize_Grade1', 'ClassSize_Grade2', 'ClassSize_Grade3',
    'ClassSize_Grade4', 'ClassSize_Grade5', 'ClassSize_Grade6',
    'Teacher_Count', 'ProfessionalSupport_Count', 'CampusAdmin_Count', 'CentralAdmin_Count',
    'EducationalAides_Count', 'FullTime_Counselors_Count', 'PartTime_Counselors_Count',
    'Teachers_AfricanAmerican', 'Teachers_Hispanic', 'Teachers_White', 'Teachers_Male', 'Teachers_Female',
    'Teachers_NoDegree', 'Teachers_Bachelors', 'Teachers_Masters', 'Teachers_Doctorate',
    'Experience_None', 'Experience_1to5', 'Experience_6to10', 'Experience_11to20',
    'Years_Experience_Principals', 'Years_Experience_Teachers',
    'Salary_Experience_None', 'Salary_Experience_1to5', 'Salary_Experience_6to10',
    'Salary_Experience_11to20', 'Salary_Experience_21to30', 'Salary_Experience_Over30',
    'Salary_Teachers', 'Salary_ProfessionalSupport', 'Salary_CampusAdmin', 'Salary_CentralAdmin',
    'Turnover_Teachers'
]

df = df[variables_to_keep]
```

```{python dfoutput, echo=FALSE}
# Save file in repo
df.to_csv('Data\Results\df.csv', index=False)
```


```{python plot1, echo=FALSE}
## 2. Plotting

## 2.1 Correlation with Master's degree posession and STAAR scores
masters_STAAR_scatter = alt.Chart(df).transform_fold(
    ['All_ELA_District_Meets', 'All_Math_District_Meets'], 
    as_=['Subject', 'Percentage_Meeting_Grade_Level']
).transform_calculate(
    Subject_Label=alt.expr.if_(
        alt.datum.Subject == 'All_ELA_District_Meets',
        'Reading',  
        'Math' 
    )
).mark_circle(size=50).encode(
    x=alt.X('Teachers_Masters:Q', title='% Teachers with Masters Degree'),  # X-axis
    y=alt.Y('Percentage_Meeting_Grade_Level:Q', title='% of Students Meeting Grade Level'),
    color=alt.Color(
        'Subject_Label:N',  
        scale=alt.Scale(range=['red', 'blue']),  
        legend=alt.Legend(title='Subject')
    ),
    tooltip=['Subject_Label:N', 'Teachers_Masters:Q', 'Percentage_Meeting_Grade_Level:Q']
).properties(
    title='Student Proficiency vs. % Teachers with Masters (ELA & Math)',
    width=600,
    height=400
)

regression_line = alt.Chart(df).transform_fold(
    ['All_ELA_District_Meets', 'All_Math_District_Meets'], 
    as_=['Subject', 'Percentage_Meeting_Grade_Level']
).transform_calculate(
    Subject_Label=alt.expr.if_(
        alt.datum.Subject == 'All_ELA_District_Meets', 'Reading', 'Math'
    )
).transform_regression(
    'Teachers_Masters', 'Percentage_Meeting_Grade_Level', groupby=['Subject_Label']
).mark_line().encode(
    x='Teachers_Masters:Q',
    y='Percentage_Meeting_Grade_Level:Q',
    color='Subject_Label:N'
)

masters_STAAR_scatter = masters_STAAR_scatter + regression_line

# Save and show plot
masters_STAAR_scatter.save(r'pictures\masters_STAAR_scatter.png', format='png')
```

```{python plot2, echo=FALSE}
## 2.2 Correlation with teacher years of experience and math and reading STAAR scores
years_STAAR_scatter = alt.Chart(df).transform_fold(
    ['All_ELA_District_Meets', 'All_Math_District_Meets'], 
    as_=['Subject', 'Percentage_Meeting_Grade_Level']
).transform_calculate(
    Subject_Label=alt.expr.if_(
        alt.datum.Subject == 'All_ELA_District_Meets',
        'Reading',  
        'Math' 
    )
).mark_circle(size=50).encode(
    x=alt.X('Years_Experience_Teachers:Q', title='Average Teacher Years of Experience'),  # X-axis
    y=alt.Y('Percentage_Meeting_Grade_Level:Q', title='% of Students Meeting Grade Level'),
    color=alt.Color(
        'Subject_Label:N',  
        scale=alt.Scale(range=['red', 'blue']),  
        legend=alt.Legend(title='Subject')
    )
).properties(
    title='Student Proficiency vs. Average Teacher Years of Experience (ELA & Math)',
    width=600,
    height=400
)

regression_line = alt.Chart(df).transform_fold(
    ['All_ELA_District_Meets', 'All_Math_District_Meets'], 
    as_=['Subject', 'Percentage_Meeting_Grade_Level']
).transform_calculate(
    Subject_Label=alt.expr.if_(
        alt.datum.Subject == 'All_ELA_District_Meets', 'Reading', 'Math'
    )
).transform_regression(
    'Years_Experience_Teachers', 'Percentage_Meeting_Grade_Level', groupby=['Subject_Label']
).mark_line().encode(
    x='Years_Experience_Teachers:Q',
    y='Percentage_Meeting_Grade_Level:Q',
    color='Subject_Label:N'
)

years_STAAR_scatter = years_STAAR_scatter + regression_line

# Save and show plot
years_STAAR_scatter.save(r'pictures\years_STAAR_scatter.png', format='png')
```

```{python plot 3, echo=FALSE}
## 2.3 Choropleth
path = r"Data\Raw\school_shp\School_Districts_2024.shp"
gdf = gpd.read_file(path)
print(gdf.head()) #To double-check that all the variables are there

# Merge
## First, we renamed our variable for the merge
df.rename(columns={"DISTRICT": "DISTRICT_N"}, inplace=True)

# Perform the merge
merged = gpd.GeoDataFrame(
    pd.merge(df, gdf, on="DISTRICT_N", how="inner")
)

merged = merged.drop_duplicates(subset=['DISTRICT_N'], keep='first')

# Calculate and print the average turnover for districts below 30%
below_30_avg_turnover = merged[merged['Turnover_Teachers'] <= 30]['Turnover_Teachers'].mean()
print(f"Average Teacher Turnover Rate for districts below 30%: {below_30_avg_turnover:.2f}%")

#Now, for the choropleth
# Step 1: Filter districts with turnover higher than 30%
high_turnover = merged[merged['Turnover_Teachers'] > 30]

# Step 2: Plot the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(12, 8))

# Define the maximum value for the legend
max_value = merged['Turnover_Teachers'].max()

# Add the plot with customized legend
merged.plot(
    column='Turnover_Teachers', 
    cmap='YlOrRd', 
    legend=True, 
    ax=ax, 
    edgecolor='black',
    legend_kwds={
        'label': f"Teacher Turnover Rate (%)\n(Max: {max_value:.1f}%)",
        'orientation': "vertical"
    }
)

# Step 3: Overlay district names
for x, y, label in zip(high_turnover.geometry.centroid.x, 
                       high_turnover.geometry.centroid.y, 
                       high_turnover['DISTNAME']):
    ax.text(x, y, label, fontsize=10, ha='center', color='black', weight='bold')

# Step 4: Add title and other customizations
ax.set_title("Teacher Turnover Rate by District (Turnover > 30%)", fontsize=16)
ax.axis('off')

# Save
plt.savefig(r'pictures\map_teacher_turnover.png', format='png', bbox_inches='tight')
```

```{python plot 4, echo=FALSE}
## 2.4 Ranking chart: Districts with high teacher turnover and students outcomes

high_turnover_df = df[df['Turnover_Teachers'] > 30]

high_turnover_df = pd.melt(
    high_turnover_df,
    id_vars=["DISTRICT_N", "DISTNAME"],
    value_vars=["All_Math_District_Meets", "All_ELA_District_Meets"],
    var_name="TEST",
    value_name="PERCENTAGE_STUDENTS"
)

# Rename values for better readability
high_turnover_df["TEST"] = high_turnover_df["TEST"].replace({
    "All_Math_District_Meets": "Math",
    "All_ELA_District_Meets": "ELA"
})

rest_avg = df[df['Turnover_Teachers'] <= 30]

# Reshape the DataFrame using pd.melt()
reshaped_rest_avg = pd.melt(
    rest_avg,
    id_vars=["DISTRICT_N", "DISTNAME"],  # Keep district identifiers
    value_vars=["All_Math_District_Meets", "All_ELA_District_Meets"],  # Reshape Math and ELA columns
    var_name="TEST",  # Column to indicate test type
    value_name="PERCENTAGE_STUDENTS"  # Column for percentage of students
)

# Calculate the average percentage for Math and ELA
average_math = reshaped_rest_avg[reshaped_rest_avg["TEST"] == "All_Math_District_Meets"]["PERCENTAGE_STUDENTS"].mean()
average_ela = reshaped_rest_avg[reshaped_rest_avg["TEST"] == "All_ELA_District_Meets"]["PERCENTAGE_STUDENTS"].mean()

# Create a new DataFrame with the label "Rest" and the averages
rest_row = pd.DataFrame({
    "DISTRICT_N": ["Rest", "Rest"],  # Repeat "Rest" for both rows
    "DISTNAME": ["Rest", "Rest"],   # Repeat "Rest" for both rows
    "TEST": ["Math", "ELA"],        # Separate rows for Math and ELA
    "PERCENTAGE_STUDENTS": [average_math, average_ela]  # Corresponding averages
})

# Append the "Rest" row to the reshaped DataFrame
filtered_df = pd.concat([high_turnover_df, rest_row], ignore_index=True)

# Update the Above_Rest column to handle the "Rest" row separately
filtered_df['Above_Rest'] = filtered_df.apply(
    lambda row: "Rest" if row['DISTNAME'] == "Rest" else (
        "Above Rest" if row['PERCENTAGE_STUDENTS'] > rest_row[rest_row['TEST'] == row['TEST']]['PERCENTAGE_STUDENTS'].values[0] else "Below Rest"
    ),
    axis=1
)

# Create a bubble chart using Altair with conditional coloring
bubble_chart = alt.Chart(filtered_df).mark_circle().encode(
    x=alt.X(
        "TEST:N",
        title="Percentage of Students Meeting Grade Level in Math and ELA",
        axis=alt.Axis(labelAngle=0, labelPadding=20)  
    ),
    y=alt.Y(
        "DISTNAME:N",
        title="District Name",
        sort="-x"
    ),
    size=alt.Size(
        "PERCENTAGE_STUDENTS:Q",
        title="Percentage of Students Meeting Grade Level",
        scale=alt.Scale(domain=[10, 60], range=[20, 1500]), 
        legend=alt.Legend(
            title="Percentage Range",
            orient="right",
            titleFontSize=14,
            values=[10, 15, 20, 30, 40, 60],
            symbolStrokeColor="black",  
            symbolFillColor="white",   
            symbolStrokeWidth=1.5      
        )
    ),
    color=alt.Color(
        "Above_Rest:N",
        scale=alt.Scale(
            domain=["Above Rest", "Below Rest", "Rest"],
            range=["green", "red", "grey"]
        ),
        legend=alt.Legend(
            title="Comparative Performance",
            titleFontSize=14,
            labelFontSize=12
        )
    ),
    tooltip=["DISTNAME:N", "TEST:N", "PERCENTAGE_STUDENTS:Q", "Above_Rest:N"]
).properties(
    title=alt.TitleParams(
        text="Districts with High Teacher Turnover by Students Outcomes (Math and ELA)",
        fontSize=16,
        fontWeight="bold"
    ),
    width=500,  
    height=400
).configure_axis(
    labelFontSize=14,  
    titleFontSize=16   
).configure_legend(
    titleFontSize=14,
    labelFontSize=12
).configure_view(
    strokeOpacity=0  
)

bubble_chart.show()

# Save
bubble_chart.save(r'pictures\bubble_ranking_districts.png', format='png')
```

```{python plot5, echo=FALSE}
## 2.5 Teacher turnover, years of experience and salary

# Filter the DataFrame for the variables of interest
filtered_df = df[["Years_Experience_Teachers", "Turnover_Teachers", "Salary_Teachers", "DISTNAME"]].copy()


# Create the `Experience_Range` column using the categorize_experience function
def categorize_experience(value):
    """
    Categorizes teacher experience into predefined ranges.
    """
    if value == 0:
        return "None"
    elif 1 <= value <= 5:
        return "1 to 5"
    elif 5 < value <= 10:
        return "6 to 10"
    elif 10 < value <= 15:
        return "11 to 15"
    elif 15 < value <= 20:
        return "16 to 20"
    elif value > 20:
        return ">20"
    else:
        return "Unknown"

filtered_df["Experience_Range"] = filtered_df["Years_Experience_Teachers"].apply(categorize_experience)

# Group by Experience_Range and calculate average salary and turnover rate
group_averages = filtered_df.groupby("Experience_Range").agg(
    Avg_Salary=("Salary_Teachers", "mean"),
    Avg_Turnover=("Turnover_Teachers", "mean")
).reset_index()

# Ensure the merge adds the average salary and turnover columns
filtered_df = filtered_df.merge(group_averages, on="Experience_Range", how="left")

# Create color column: green if above average, red if below
filtered_df["Color"] = filtered_df.apply(
    lambda row: "Above Category's Average" if row["Salary_Teachers"] >= row["Avg_Salary"] else "Below Category's Average",
    axis=1
)

# Bubble chart
bubble_chart_2 = alt.Chart(filtered_df).mark_circle().encode(
    x=alt.X(
        "Experience_Range:N",
        title="Teacher's Years of Experience",
        sort=["None", "1 to 5", "6 to 10", "11 to 15", "16 to 20", ">20"],
        axis=alt.Axis(labelAngle=0, labelPadding=20)
    ),
    y=alt.Y(
        "Turnover_Teachers:Q",
        title="Teacher Turnover Rate (%)"
    ),
    size=alt.Size(
        "Salary_Teachers:Q",
        title="Average Salary ($)",
        scale=alt.Scale(domain=[45000, 70000], range=[50, 2000]),
        legend=alt.Legend(
            title="Salary ($)",
            orient="right",
            titleFontSize=14,
            values=[45000, 50000, 52000, 55000, 60000, 65000, 70000],
            symbolStrokeColor="black",
            symbolFillColor="white",
            symbolStrokeWidth=1.5
        )
    ),
    color=alt.Color(
        "Color:N",
        scale=alt.Scale(domain=["Above Category's Average", "Below Category's Average"], range=["green", "red"]),
        legend=alt.Legend(
            title="Salary Comparison",
            titleFontSize=14,
            labelFontSize=12
        )
    ),
    tooltip=[
        "DISTNAME:N",
        "Experience_Range:N",
        "Turnover_Teachers:Q",
        "Salary_Teachers:Q",
        "Avg_Turnover:Q",
        "Avg_Salary:Q"
    ]
).properties(
    title="Teacher Turnover Rate by Teacher's Years of Experience and Salary",
    width=500,
    height=400
).configure_axis(
    labelFontSize=14,
    titleFontSize=16
).configure_legend(
    titleFontSize=14,
    labelFontSize=12
)

# Show the bubble chart
bubble_chart_2.show()

# Save the chart
bubble_chart_2.save(r'pictures\bubble_teacher_exp_turnover.png', format='png')

# Count districts above and below the category's average salary
above_avg_count = len(filtered_df[filtered_df["Salary_Teachers"] > filtered_df["Avg_Salary"]])
below_avg_count = len(filtered_df[filtered_df["Salary_Teachers"] <= filtered_df["Avg_Salary"]])

# Print the results
print(f"Number of districts above the category's average salary: {above_avg_count}")
print(f"Number of districts below the category's average salary: {below_avg_count}")
print(f"Region's average: {df['Salary_Teachers'].mean()}")
```

Our project examines the correlation between teacher characteristics (years of experience, types of degree held, salary, and turnover rates) and student test score outcomes in Texas. We aimed to determine which teacher attributes were most predictive of student achievement and consider what polices districts could implement to promote these attributes. 

We use public data from Texas Education Service Center Region 20, accessed through the Texas Education Agency (TEA) website. Our district-level shapefile also came from TEA. We focused on one region of Texas in order to keep our findings more precise, and the region around San Antonio offers a rich diversity of backgrounds regarding urbanicity/rurality, race, immigrant status, English Learner status, and socioeconomic background. Our data was at the district level, providing 58 data points for each of our variables; this is one weakness of our project because our wealth of data was limited. In hindsight, it would have been more precise had we used school-level data instead of district data, but we anticipate that we would see very similar trends regardless. Additionally, we had difficulty deciding which indicators to pull from TEA because there are hundreds available, so we had to individually pull the codes only for the relevant variables.

We first demonstrated the correlation between students test scores and teacher attributes in our shiny dashboard, and we chose to look at average teacher years of experience per district versus the percentage of students meeting grade level in math or reading tests. This allowed us to compare the effects across different demographic groups. We found that all groups showed a positive correlation between teacher years of experience and test scores, in both math and reading.

![](pictures/shiny_screenshot.png){ width=63% fig-align="center"} 

Next, we compared looked at percentage of teachers with Master’s degrees and its link to student test scores. Ultimately, we found a stronger correlation between student outcomes and teacher years of experience than percentage of teachers holding a Master’s degree, emphasizing the importance of districts retaining teachers. See below for the graphs on both these correlations (left: years of experience; right: percentage holding advanced degrees).

![](pictures/years_STAAR_scatter.png){ width=45%} ![](pictures/masters_STAAR_scatter.png){ width=45%}

Next, we examined the link between student outcomes and teacher turnover rates in each of the 58 districts in Region 20. We used the shapefile to create a map to examine regional differences and found nine districts with turnover rates above 30%, with a region average turnover rate of 19%. Dilley ISD holds the highest turnover rate.

![](pictures/map_teacher_turnover.png){ width=45% fig-align="center"} 

Then, we took these highest turnover rate districts and looked at their relationship with student test scores. We find that, with the exception of Medina ISD, the high turnover rate districts perform worse than the average of the remaining 49 districts on the reading exam. When we look at math, all nine districts perform worse than the average of the other districts, and Dilley ISD stands out again with the worst performance on the math exam.

![](pictures/bubble_ranking_districts.png){ width=45% fig-align="center"}

Lastly, we wanted to examine what might be causing the high turnover rates in these districts. We suspected that one factor might be teacher salaries, so we plotted teacher salaries in all 58 districts according to years of teacher experience. We use the bins provided by TEA for teacher experience level and calculated the average salary for each of these bins. We code for the color of the bubbles to correspond to whether that district's average teacher salary is below or above this average. We then plot this against turnover rate and see that, generally, the districts with the highest turnover rates have below average salaries for their experience level.

![](pictures/bubble_teacher_exp_turnover.png){ width=45% fig-align="center"}

To conclude, we have three main findings. First, years of teaching experience are more valuable than advanced degrees in promoting student achievement. Second, underperforming districts face higher teacher turnover rates, often losing high-quality teachers. Third, these high turnover districts also have less competitive teacher salaries, creating less incentive for teachers to stay.

This leads us to our policy recommendations. To promote student achievement, districts must retain high-quality teachers, which means decreasing turnover. We suggest first, districts should increase teacher compensation through strategic resource allocation like bonuses to teachers in high need areas, such as those that are low income, underperforming, have large English Learner or special education populations, etc. This will help retain high-value teachers. Second, districts should implement professional development programs (such as mentorship programs, built-in teacher collaborative time, ongoing training, or talent recognition program) alongside these raises, so teachers have the supports they need to succeed in their jobs. These interventions could help encourage attraction and retention of high-quality teachers, which will advance student achievement in the region.

In terms of future directions, we suggest utilization of a more finite level of data, such as school-level or student-level; this would provide more robust estimates of the link between student outcomes and teacher attributes. Second, future investigation could examine the link between these teacher attributes and other variables of student outcomes, such as graduation rate, chronic absenteeism rate, or percentage of students going on to pursue postsecondary education. Lastly, we suggest that for a more comprehensive idea of this link, future research widens the geographical scope of the investigation to include more Education Service Center regions, or even all of Texas.