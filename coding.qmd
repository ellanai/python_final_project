---
title: "3058 Final Project: How Teacher Characteristics Correlate with Student Test Scores. Evidence from Texas ESC Region 20"
author: "Evy Lanai & Alberto Saldarriaga"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
output:
  echo: false
  eval: false
---

## Packages

```{bash}
pip install -r requirements.txt
```

## Loading packages

```{python}
import pandas as pd
import altair as alt
import geopandas as gpd
import matplotlib.pyplot as plt
from shiny import App, render, ui
from shinywidgets import render_altair, output_widget
import numpy as np

import warnings
# Suppress specific FutureWarnings
warnings.filterwarnings("ignore", category=FutureWarning)
```

```{python loading the dfs, echo=FALSE}
## 1. Data Wrangling

## 1.1 Data Wrangling
#Institutional outcomes (class size/absenteesm)
path = r"Data\Raw\student\DSTUD.xlsx"
df_students = pd.read_excel(path)
print(df_students.columns) #To confirm variables names

#Staff outcomes (teacher characteristics)
path = r"Data\Raw\staff\DSTAF.xlsx"
df_staff = pd.read_excel(path) 
print(df_staff.columns) #To confirm variables names

#Student outcomes (test scores)
path = r"Data\Raw\staar\DSTAAR_ALL.xlsx"
df_staar = pd.read_excel(path)
print(df_staar.columns) #To confirm variables names
```

```{python merging, echo=FALSE}
## 1.2 Merging
df = pd.merge(df_students, df_staff, on="DISTRICT", how="left", suffixes=('', '_drop'))
df = df.drop(columns=['DISTNAME_drop']) #Drop the duplicate variable

df = pd.merge(df, df_staar, on="DISTRICT", how="left", suffixes=('', '_drop'))
df = df.drop(columns=['DISTNAME_drop']) #Drop the duplicate variable
```

```{python renaming, echo=FALSE}
## 1.3 Renaming and keeping variables of interest
# Variables of interest
rename_dict = {
    #Levels
    'DDA00AR01S23R': 'All_ELA_District_Approaches',
    'DDA00AR01223R': 'All_ELA_District_Meets',
    'DDA00AR01323R': 'All_ELA_District_Masters',
    'DDA00AM01S23R': 'All_Math_District_Approaches',
    'DDA00AM01223R': 'All_Math_District_Meets',
    'DDA00AM01323R': 'All_Math_District_Masters',

    #Race/Ethnicity    
    'DDB00AR01S23R': 'All_ELA_AfricanAmerican_Approaches',
    'DDB00AR01223R': 'All_ELA_AfricanAmerican_Meets',
    'DDB00AR01323R': 'All_ELA_AfricanAmerican_Masters',
    'DDB00AM01S23R': 'All_Math_AfricanAmerican_Approaches',
    'DDB00AM01223R': 'All_Math_AfricanAmerican_Meets',
    'DDB00AM01323R': 'All_Math_AfricanAmerican_Masters',
    'DDH00AR01S23R': 'All_ELA_Hispanic_Approaches',
    'DDH00AR01223R': 'All_ELA_Hispanic_Meets',
    'DDH00AR01323R': 'All_ELA_Hispanic_Masters',
    'DDH00AM01S23R': 'All_Math_Hispanic_Approaches',
    'DDH00AM01223R': 'All_Math_Hispanic_Meets',
    'DDH00AM01323R': 'All_Math_Hispanic_Masters',
    'DDW00AR01S23R': 'All_ELA_White_Approaches',
    'DDW00AR01223R': 'All_ELA_White_Meets',
    'DDW00AR01323R': 'All_ELA_White_Masters',
    'DDW00AM01S23R': 'All_Math_White_Approaches',
    'DDW00AM01223R': 'All_Math_White_Meets',
    'DDW00AM01323R': 'All_Math_White_Masters',

    #Type-specific Ed
    'DDS00AR01S23R': 'All_ELA_SpecialEd_Approaches',
    'DDS00AR01223R': 'All_ELA_SpecialEd_Meets',
    'DDS00AR01323R': 'All_ELA_SpecialEd_Masters',
    'DDS00AM01S23R': 'All_Math_SpecialEd_Approaches',
    'DDS00AM01223R': 'All_Math_SpecialEd_Meets',
    'DDS00AM01323R': 'All_Math_SpecialEd_Masters',
    'DDE00AR01S23R': 'All_ELA_EcoDis_Approaches',
    'DDE00AR01223R': 'All_ELA_EcoDis_Meets',
    'DDE00AR01323R': 'All_ELA_EcoDis_Masters',
    'DDE00AM01S23R': 'All_Math_EcoDis_Approaches',
    'DDE00AM01223R': 'All_Math_EcoDis_Meets',
    'DDE00AM01323R': 'All_Math_EcoDis_Masters',
    'DD000AR01S23R': 'All_ELA_EBEL_Approaches',
    'DD000AR01223R': 'All_ELA_EBEL_Meets',
    'DD000AR01323R': 'All_ELA_EBEL_Masters',
    'DD000AM01S23R': 'All_Math_EBEL_Approaches',
    'DD000AM01223R': 'All_Math_EBEL_Meets',
    'DD000AM01323R': 'All_Math_EBEL_Masters',

    # Enrollment variables
    'DPNTALLC': 'Enrollment_Total',
    'DPNTBLAP': 'Enrollment_AfricanAmerican',
    'DPNTHISP': 'Enrollment_Hispanic',
    'DPNTWHIP': 'Enrollment_White',
    'DPNTFEMP': 'Enrollment_Female',
    'DPNTMALP': 'Enrollment_Male',
    'DPNTECOP': 'Enrollment_EcoDis',
    'DPNTNEDP': 'Enrollment_NonEcoDis',
    'DPNT504P': 'Enrollment_Sect504',
    'DPNTBILP': 'Enrollment_EBEL',
    
    # Class size variables
    'DPCTGKGA': 'ClassSize_Kindergarten',
    'DPCTG01A': 'ClassSize_Grade1',
    'DPCTG02A': 'ClassSize_Grade2',
    'DPCTG03A': 'ClassSize_Grade3',
    'DPCTG04A': 'ClassSize_Grade4',
    'DPCTG05A': 'ClassSize_Grade5',
    'DPCTG06A': 'ClassSize_Grade6',
    
    # Teacher and staff counts
    'DPSTTOFC': 'Teacher_Count',
    'DPSPTOFC': 'ProfessionalSupport_Count',
    'DPSSTOFC': 'CampusAdmin_Count',
    'DPSCTOFC': 'CentralAdmin_Count',
    'DPSECOFC': 'EducationalAides_Count',
    'DPSRTOFC': 'FullTime_Counselors_Count',
    'DPSRTOPC': 'PartTime_Counselors_Count',
    
    # Teacher demographics
    'DPSTBLFP': 'Teachers_AfricanAmerican',
    'DPSTHIFP': 'Teachers_Hispanic',
    'DPSTWHFP': 'Teachers_White',
    'DPSTMAFP': 'Teachers_Male',
    'DPSTFEFP': 'Teachers_Female',
    
    # Teacher education
    'DPSTNOFP': 'Teachers_NoDegree',
    'DPSTBAFP': 'Teachers_Bachelors',
    'DPSTMSFP': 'Teachers_Masters',
    'DPSTPHFP': 'Teachers_Doctorate',
    
    # Teacher experience
    'DPST00FP': 'Experience_None',
    'DPST01FP': 'Experience_1to5',
    'DPST06FP': 'Experience_6to10',
    'DPST11FP': 'Experience_11to20',
    
    # Principal and teacher experience (years)
    'DPSHEXPA': 'Years_Experience_Principals',
    'DPSTEXPA': 'Years_Experience_Teachers',
    
    # Teacher salaries by experience
    'DPST00SA': 'Salary_Experience_None',
    'DPST01SA': 'Salary_Experience_1to5',
    'DPST06SA': 'Salary_Experience_6to10',
    'DPST11SA': 'Salary_Experience_11to20',
    'DPST21SA': 'Salary_Experience_21to30',
    'DPST30SA': 'Salary_Experience_Over30',
    
    # Salaries by role
    'DPSTTOSA': 'Salary_Teachers',
    'DPSUTOSA': 'Salary_ProfessionalSupport',
    'DPSSTOSA': 'Salary_CampusAdmin',
    'DPSCTOSA': 'Salary_CentralAdmin',
    
    # Turnover
    'DPSTURNR': 'Turnover_Teachers'
}

df.rename(columns=rename_dict, inplace=True)

# Keeping our variables
variables_to_keep = [
    'DISTRICT', 'DISTNAME',
    'All_ELA_District_Approaches', 'All_ELA_District_Meets', 'All_ELA_District_Masters',
    'All_Math_District_Approaches', 'All_Math_District_Meets', 'All_Math_District_Masters',
    'All_ELA_AfricanAmerican_Approaches', 'All_ELA_AfricanAmerican_Meets', 'All_ELA_AfricanAmerican_Masters',
    'All_Math_AfricanAmerican_Approaches', 'All_Math_AfricanAmerican_Meets', 'All_Math_AfricanAmerican_Masters',
    'All_ELA_Hispanic_Approaches', 'All_ELA_Hispanic_Meets', 'All_ELA_Hispanic_Masters',
    'All_Math_Hispanic_Approaches', 'All_Math_Hispanic_Meets', 'All_Math_Hispanic_Masters',
    'All_ELA_White_Approaches', 'All_ELA_White_Meets', 'All_ELA_White_Masters',
    'All_Math_White_Approaches', 'All_Math_White_Meets', 'All_Math_White_Masters',
    'All_ELA_SpecialEd_Approaches', 'All_ELA_SpecialEd_Meets', 'All_ELA_SpecialEd_Masters',
    'All_Math_SpecialEd_Approaches', 'All_Math_SpecialEd_Meets', 'All_Math_SpecialEd_Masters',
    'All_ELA_EcoDis_Approaches', 'All_ELA_EcoDis_Meets', 'All_ELA_EcoDis_Masters',
    'All_Math_EcoDis_Approaches', 'All_Math_EcoDis_Meets', 'All_Math_EcoDis_Masters',
    'All_ELA_EBEL_Approaches', 'All_ELA_EBEL_Meets', 'All_ELA_EBEL_Masters',
    'All_Math_EBEL_Approaches', 'All_Math_EBEL_Meets', 'All_Math_EBEL_Masters',
    'Enrollment_Total', 'Enrollment_AfricanAmerican', 'Enrollment_Hispanic', 'Enrollment_White',
    'Enrollment_Female', 'Enrollment_Male', 'Enrollment_EcoDis', 'Enrollment_NonEcoDis',
    'Enrollment_Sect504', 'Enrollment_EBEL',
    'ClassSize_Kindergarten', 'ClassSize_Grade1', 'ClassSize_Grade2', 'ClassSize_Grade3',
    'ClassSize_Grade4', 'ClassSize_Grade5', 'ClassSize_Grade6',
    'Teacher_Count', 'ProfessionalSupport_Count', 'CampusAdmin_Count', 'CentralAdmin_Count',
    'EducationalAides_Count', 'FullTime_Counselors_Count', 'PartTime_Counselors_Count',
    'Teachers_AfricanAmerican', 'Teachers_Hispanic', 'Teachers_White', 'Teachers_Male', 'Teachers_Female',
    'Teachers_NoDegree', 'Teachers_Bachelors', 'Teachers_Masters', 'Teachers_Doctorate',
    'Experience_None', 'Experience_1to5', 'Experience_6to10', 'Experience_11to20',
    'Years_Experience_Principals', 'Years_Experience_Teachers',
    'Salary_Experience_None', 'Salary_Experience_1to5', 'Salary_Experience_6to10',
    'Salary_Experience_11to20', 'Salary_Experience_21to30', 'Salary_Experience_Over30',
    'Salary_Teachers', 'Salary_ProfessionalSupport', 'Salary_CampusAdmin', 'Salary_CentralAdmin',
    'Turnover_Teachers'
]

df = df[variables_to_keep]
```

```{python dfoutput, echo=FALSE}
# Save file in repo
df.to_csv('Data\Results\df.csv', index=False)
```


```{python plot1, echo=FALSE}
## 2. Plotting

## 2.1 Correlation with Master's degree posession and STAAR scores
masters_STAAR_scatter = alt.Chart(df).transform_fold(
    ['All_ELA_District_Meets', 'All_Math_District_Meets'], 
    as_=['Subject', 'Percentage_Meeting_Grade_Level']
).transform_calculate(
    Subject_Label=alt.expr.if_(
        alt.datum.Subject == 'All_ELA_District_Meets',
        'Reading',  
        'Math' 
    )
).mark_circle(size=50).encode(
    x=alt.X('Teachers_Masters:Q', title='% Teachers with Masters Degree'),  # X-axis
    y=alt.Y('Percentage_Meeting_Grade_Level:Q', title='% of Students Meeting Grade Level'),
    color=alt.Color(
        'Subject_Label:N',  
        scale=alt.Scale(range=['red', 'blue']),  
        legend=alt.Legend(title='Subject')
    ),
    tooltip=['Subject_Label:N', 'Teachers_Masters:Q', 'Percentage_Meeting_Grade_Level:Q']
).properties(
    title='Student Proficiency vs. % Teachers with Masters (ELA & Math)',
    width=600,
    height=400
)

regression_line = alt.Chart(df).transform_fold(
    ['All_ELA_District_Meets', 'All_Math_District_Meets'], 
    as_=['Subject', 'Percentage_Meeting_Grade_Level']
).transform_calculate(
    Subject_Label=alt.expr.if_(
        alt.datum.Subject == 'All_ELA_District_Meets', 'Reading', 'Math'
    )
).transform_regression(
    'Teachers_Masters', 'Percentage_Meeting_Grade_Level', groupby=['Subject_Label']
).mark_line().encode(
    x='Teachers_Masters:Q',
    y='Percentage_Meeting_Grade_Level:Q',
    color='Subject_Label:N'
)

masters_STAAR_scatter = masters_STAAR_scatter + regression_line

# Save and show plot
masters_STAAR_scatter.save('pictures\masters_STAAR_scatter.png', format='png')
```

```{python plot2, echo=FALSE}
## 2.2 Correlation with teacher years of experience and math and reading STAAR scores
years_STAAR_scatter = alt.Chart(df).transform_fold(
    ['All_ELA_District_Meets', 'All_Math_District_Meets'], 
    as_=['Subject', 'Percentage_Meeting_Grade_Level']
).transform_calculate(
    Subject_Label=alt.expr.if_(
        alt.datum.Subject == 'All_ELA_District_Meets',
        'Reading',  
        'Math' 
    )
).mark_circle(size=50).encode(
    x=alt.X('Years_Experience_Teachers:Q', title='Average Teacher Years of Experience'),  # X-axis
    y=alt.Y('Percentage_Meeting_Grade_Level:Q', title='% of Students Meeting Grade Level'),
    color=alt.Color(
        'Subject_Label:N',  
        scale=alt.Scale(range=['red', 'blue']),  
        legend=alt.Legend(title='Subject')
    )
).properties(
    title='Student Proficiency vs. Average Teacher Years of Experience (ELA & Math)',
    width=600,
    height=400
)

regression_line = alt.Chart(df).transform_fold(
    ['All_ELA_District_Meets', 'All_Math_District_Meets'], 
    as_=['Subject', 'Percentage_Meeting_Grade_Level']
).transform_calculate(
    Subject_Label=alt.expr.if_(
        alt.datum.Subject == 'All_ELA_District_Meets', 'Reading', 'Math'
    )
).transform_regression(
    'Years_Experience_Teachers', 'Percentage_Meeting_Grade_Level', groupby=['Subject_Label']
).mark_line().encode(
    x='Years_Experience_Teachers:Q',
    y='Percentage_Meeting_Grade_Level:Q',
    color='Subject_Label:N'
)

years_STAAR_scatter = years_STAAR_scatter + regression_line

# Save and show plot
years_STAAR_scatter.save('pictures\years_STAAR_scatter.png', format='png')
```

```{python}
path = r"Data\Raw\school_shp\School_Districts_2024.shp"
gdf = gpd.read_file(path)
print(gdf.head())
```

```{python plot 3, echo=FALSE}
## 2.3 Choropleth
path = r"Data\Raw\school_shp\School_Districts_2024.shp"
gdf = gpd.read_file(path)

# Merge
## First, we renamed our variable for the merge
df.rename(columns={"DISTRICT": "DISTRICT_N"}, inplace=True)

# Perform the merge
merged = gpd.GeoDataFrame(
    pd.merge(df, gdf, on="DISTRICT_N", how="inner")
)

merged = merged.drop_duplicates(subset=['DISTRICT_N'], keep='first')

# Calculate and print the average turnover for districts below 30%
below_30_avg_turnover = merged[merged['Turnover_Teachers'] <= 30]['Turnover_Teachers'].mean()
print(f"Average Teacher Turnover Rate for districts below 30%: {below_30_avg_turnover:.2f}%")

#Now, for the choropleth
# Step 1: Filter districts with turnover higher than 30%
high_turnover = merged[merged['Turnover_Teachers'] > 30]

# Step 2: Plot the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(12, 8))

# Define the maximum value for the legend
max_value = merged['Turnover_Teachers'].max()

# Add the plot with customized legend
merged.plot(
    column='Turnover_Teachers', 
    cmap='YlOrRd', 
    legend=True, 
    ax=ax, 
    edgecolor='black',
    legend_kwds={
        'label': f"Teacher Turnover Rate (%)\n(Max: {max_value:.1f}%)",
        'orientation': "vertical"
    }
)

# Step 3: Overlay district names
for x, y, label in zip(high_turnover.geometry.centroid.x, 
                       high_turnover.geometry.centroid.y, 
                       high_turnover['DISTNAME']):
    ax.text(x, y, label, fontsize=10, ha='center', color='black', weight='bold')

# Step 4: Add title and other customizations
ax.set_title("Teacher Turnover Rate by District (Turnover > 30%)", fontsize=16)
ax.axis('off')

# Save
plt.savefig('pictures\map_teacher_turnover.png', format='png', bbox_inches='tight')
```
