---
title: "Alberto Python data analysis"
format: pdf
---

1. Packages
```{python}
import pandas as pd
import altair as alt
import geopandas as gpd
import matplotlib.pyplot as plt

import warnings
# Suppress specific FutureWarnings
warnings.filterwarnings("ignore", category=FutureWarning)
```

2. Loading dfs
```{python}
# Loading the shapefile
path = r"C:\Users\msald\OneDrive\Escritorio\UChicago\3. Classes\2425\1. Autum\2. PythonII\project\School_Districts_2024\School_Districts_2024.shp"
gdf = gpd.read_file(path)

# Loading our df
path = r"C:\Users\msald\OneDrive\Documents\GitHub\python_final_project\df.csv"
df = pd.read_csv(path)
```

3. Choropleth: Identifying districts by Teacher Turnover rate 
```{python}
# Merge
## First, we renamed our variable for the merge
df.rename(columns={"DISTRICT": "DISTRICT_N"}, inplace=True)

# Perform the merge
merged = gpd.GeoDataFrame(
    pd.merge(df, gdf, on="DISTRICT_N", how="inner")
)

merged = merged.drop_duplicates(subset=['DISTRICT_N'], keep='first')

# Calculate and print the average turnover for districts below 30%
below_30_avg_turnover = merged[merged['Turnover_Teachers'] <= 30]['Turnover_Teachers'].mean()
print(f"Average Teacher Turnover Rate for districts below 30%: {below_30_avg_turnover:.2f}%")

#Choropleth

# Step 1: Filter districts with turnover higher than 30%
high_turnover = merged[merged['Turnover_Teachers'] > 30]

# Step 2: Plot the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(12, 8))

# Define the maximum value for the legend
max_value = merged['Turnover_Teachers'].max()

# Add the plot with customized legend
merged.plot(
    column='Turnover_Teachers', 
    cmap='YlOrRd', 
    legend=True, 
    ax=ax, 
    edgecolor='black',
    legend_kwds={
        'label': f"Teacher Turnover Rate (%)\n(Max: {max_value:.1f}%)",
        'orientation': "vertical"
    }
)

# Step 3: Overlay district names
for x, y, label in zip(high_turnover.geometry.centroid.x, 
                       high_turnover.geometry.centroid.y, 
                       high_turnover['DISTNAME']):
    ax.text(x, y, label, fontsize=10, ha='center', color='black', weight='bold')

# Step 4: Add title and other customizations
ax.set_title("Teacher Turnover Rate by District (Turnover > 30%)", fontsize=16)
ax.axis('off')

# Save
plt.savefig('map_teacher_turnover.png', format='png', bbox_inches='tight')
plt.show()


```

4. Ranking chart: Districts with high teacher turnover and students outcomes

```{python}
high_turnover_df = df[df['Turnover_Teachers'] > 30]

high_turnover_df = pd.melt(
    high_turnover_df,
    id_vars=["DISTRICT_N", "DISTNAME"],
    value_vars=["All_Math_District_Meets", "All_ELA_District_Meets"],
    var_name="TEST",
    value_name="PERCENTAGE_STUDENTS"
)

# Rename values for better readability
high_turnover_df["TEST"] = high_turnover_df["TEST"].replace({
    "All_Math_District_Meets": "Math",
    "All_ELA_District_Meets": "ELA"
})

rest_avg = df[df['Turnover_Teachers'] <= 30]

# Reshape the DataFrame using pd.melt()
reshaped_rest_avg = pd.melt(
    rest_avg,
    id_vars=["DISTRICT_N", "DISTNAME"],  # Keep district identifiers
    value_vars=["All_Math_District_Meets", "All_ELA_District_Meets"],  # Reshape Math and ELA columns
    var_name="TEST",  # Column to indicate test type
    value_name="PERCENTAGE_STUDENTS"  # Column for percentage of students
)

# Calculate the average percentage for Math and ELA
average_math = reshaped_rest_avg[reshaped_rest_avg["TEST"] == "All_Math_District_Meets"]["PERCENTAGE_STUDENTS"].mean()
average_ela = reshaped_rest_avg[reshaped_rest_avg["TEST"] == "All_ELA_District_Meets"]["PERCENTAGE_STUDENTS"].mean()

# Create a new DataFrame with the label "Rest" and the averages
rest_row = pd.DataFrame({
    "DISTRICT_N": ["Rest", "Rest"],  # Repeat "Rest" for both rows
    "DISTNAME": ["Rest", "Rest"],   # Repeat "Rest" for both rows
    "TEST": ["Math", "ELA"],        # Separate rows for Math and ELA
    "PERCENTAGE_STUDENTS": [average_math, average_ela]  # Corresponding averages
})

# Append the "Rest" row to the reshaped DataFrame
filtered_df = pd.concat([high_turnover_df, rest_row], ignore_index=True)

# Update the Above_Rest column to handle the "Rest" row separately
filtered_df['Above_Rest'] = filtered_df.apply(
    lambda row: "Rest" if row['DISTNAME'] == "Rest" else (
        "Above Rest" if row['PERCENTAGE_STUDENTS'] > rest_row[rest_row['TEST'] == row['TEST']]['PERCENTAGE_STUDENTS'].values[0] else "Below Rest"
    ),
    axis=1
)

# Create a bubble chart using Altair with conditional coloring
bubble_chart = alt.Chart(filtered_df).mark_circle().encode(
    x=alt.X(
        "TEST:N",
        title="Percentage of Students Meeting Grade Level in Math and ELA",
        axis=alt.Axis(labelAngle=0, labelPadding=20)  
    ),
    y=alt.Y(
        "DISTNAME:N",
        title="District Name",
        sort="-x"
    ),
    size=alt.Size(
        "PERCENTAGE_STUDENTS:Q",
        title="Percentage of Students Meeting Grade Level",
        scale=alt.Scale(domain=[10, 60], range=[20, 1500]), 
        legend=alt.Legend(
            title="Percentage Range",
            orient="right",
            titleFontSize=14,
            values=[10, 15, 20, 30, 40, 60],
            symbolStrokeColor="black",  
            symbolFillColor="white",   
            symbolStrokeWidth=1.5      
        )
    ),
    color=alt.Color(
        "Above_Rest:N",
        scale=alt.Scale(
            domain=["Above Rest", "Below Rest", "Rest"],
            range=["green", "red", "grey"]
        ),
        legend=alt.Legend(
            title="Comparative Performance",
            titleFontSize=14,
            labelFontSize=12
        )
    ),
    tooltip=["DISTNAME:N", "TEST:N", "PERCENTAGE_STUDENTS:Q", "Above_Rest:N"]
).properties(
    title=alt.TitleParams(
        text="Districts with High Teacher Turnover by Students Outcomes (Math and ELA)",
        fontSize=16,
        fontWeight="bold"
    ),
    width=500,  
    height=400
).configure_axis(
    labelFontSize=14,  
    titleFontSize=16   
).configure_legend(
    titleFontSize=14,
    labelFontSize=12
).configure_view(
    strokeOpacity=0  
)

bubble_chart.show()

# Save
bubble_chart.save('bubble_ranking_districts.png', format='png')
```

5. Teacher turnover, years of experience and salary

```{python}
# Filter the DataFrame for the variables of interest
filtered_df = df[["Years_Experience_Teachers", "Turnover_Teachers", "Salary_Teachers", "DISTNAME"]].copy()


# Create the `Experience_Range` column using the categorize_experience function
def categorize_experience(value):
    """
    Categorizes teacher experience into predefined ranges.
    """
    if value == 0:
        return "None"
    elif 1 <= value <= 5:
        return "1 to 5"
    elif 5 < value <= 10:
        return "6 to 10"
    elif 10 < value <= 15:
        return "11 to 15"
    elif 15 < value <= 20:
        return "16 to 20"
    elif value > 20:
        return ">20"
    else:
        return "Unknown"

filtered_df["Experience_Range"] = filtered_df["Years_Experience_Teachers"].apply(categorize_experience)

# Group by Experience_Range and calculate average salary and turnover rate
group_averages = filtered_df.groupby("Experience_Range").agg(
    Avg_Salary=("Salary_Teachers", "mean"),
    Avg_Turnover=("Turnover_Teachers", "mean")
).reset_index()

# Ensure the merge adds the average salary and turnover columns
filtered_df = filtered_df.merge(group_averages, on="Experience_Range", how="left")

# Create color column: green if above average, red if below
filtered_df["Color"] = filtered_df.apply(
    lambda row: "Above Category's Average" if row["Salary_Teachers"] >= row["Avg_Salary"] else "Below Category's Average",
    axis=1
)

# Bubble chart
bubble_chart_2 = alt.Chart(filtered_df).mark_circle().encode(
    x=alt.X(
        "Experience_Range:N",
        title="Teacher's Years of Experience",
        sort=["None", "1 to 5", "6 to 10", "11 to 15", "16 to 20", ">20"],
        axis=alt.Axis(labelAngle=0, labelPadding=20)
    ),
    y=alt.Y(
        "Turnover_Teachers:Q",
        title="Teacher Turnover Rate (%)"
    ),
    size=alt.Size(
        "Salary_Teachers:Q",
        title="Average Salary ($)",
        scale=alt.Scale(domain=[45000, 70000], range=[50, 2000]),
        legend=alt.Legend(
            title="Salary ($)",
            orient="right",
            titleFontSize=14,
            values=[45000, 50000, 52000, 55000, 60000, 65000, 70000],
            symbolStrokeColor="black",
            symbolFillColor="white",
            symbolStrokeWidth=1.5
        )
    ),
    color=alt.Color(
        "Color:N",
        scale=alt.Scale(domain=["Above Category's Average", "Below Category's Average"], range=["green", "red"]),
        legend=alt.Legend(
            title="Salary Comparison",
            titleFontSize=14,
            labelFontSize=12
        )
    ),
    tooltip=[
        "DISTNAME:N",
        "Experience_Range:N",
        "Turnover_Teachers:Q",
        "Salary_Teachers:Q",
        "Avg_Turnover:Q",
        "Avg_Salary:Q"
    ]
).properties(
    title="Teacher Turnover Rate by Teacher's Years of Experience and Salary",
    width=500,
    height=400
).configure_axis(
    labelFontSize=14,
    titleFontSize=16
).configure_legend(
    titleFontSize=14,
    labelFontSize=12
)

# Show the bubble chart
bubble_chart_2.show()

# Save the chart
bubble_chart_2.save('bubble_teacher_exp_turnover.png', format='png')

# Count districts above and below the category's average salary
above_avg_count = len(filtered_df[filtered_df["Salary_Teachers"] > filtered_df["Avg_Salary"]])
below_avg_count = len(filtered_df[filtered_df["Salary_Teachers"] <= filtered_df["Avg_Salary"]])

# Print the results
print(f"Number of districts above the category's average salary: {above_avg_count}")
print(f"Number of districts below the category's average salary: {below_avg_count}")
print(f"Region's average: {df['Salary_Teachers'].mean()}")
```
